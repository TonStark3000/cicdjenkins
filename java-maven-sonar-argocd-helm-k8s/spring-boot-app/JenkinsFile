pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
     stage('Install AWS CLI') {
      steps {
        sh '''
          apt-get update
          apt-get install -y unzip \
          && curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" \
          && unzip awscliv2.zip \
          && sudo ./aws/install \
          && rm -rf awscliv2.zip aws/
        '''
      }
}
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://13.233.151.94:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "masthan567/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "cicdjenkins"
            GIT_USER_NAME = "TonStark3000"
            GIT_BRANCH = "main" 
        }
        steps {
             withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
            sh '''
                git config user.email "shaikmasthanshaik885@gmail.com"
                git config user.name "Masthan Shaik"

                # Ensure we're on the correct branch
                git checkout ${GIT_BRANCH}
                echo "Current Branch:"
                git branch
                echo "Current Commit:"
                git log -1 --pretty=format:'%h %s'

                # Perform the update
                BUILD_NUMBER=${BUILD_NUMBER}
                echo "Updating deployment.yml with BUILD_NUMBER=${BUILD_NUMBER}"
                sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

                # Check for changes
                git status
                git diff

                # Add and commit changes
                git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "Nothing to commit"

                # Push changes
                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} ${GIT_BRANCH}
            '''
            }
       }
    }
     stage('Deploy to EKS') {
      environment {
        AWS_DEFAULT_REGION = 'ap-south-1' // Change to your AWS region
        KUBECONFIG = 'C:\\Users\\masth\\.kube\\config' // Path to your kubeconfig file if needed
      }
      steps {
        withCredentials([string(credentialsId: 'aws-credentials-id', variable: 'AWS_ACCESS_KEY_ID'),
                         string(credentialsId: 'aws-credentials-secret-id', variable: 'AWS_SECRET_ACCESS_KEY')]) {
          sh '''
            # Configure AWS CLI
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region $AWS_DEFAULT_REGION
            
            # Update kubeconfig for EKS
            aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name utlimatecicd
            
            # Apply the deployment file to EKS
            kubectl apply -f java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
          '''
        }
      }
    }
  stage('Cleanup') {
      steps {
          cleanWs()
    }
}

  }
}
